<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace GraphJS\Controllers;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Pho\Kernel\Kernel;
use PhoNetworksAutogenerated\User;
use Rakit\Validation\Validator;
use WyriHaximus\React\Http\Middleware\SessionMiddleware;
use WyriHaximus\React\Http\Middleware\Session;


/**
 * An abstract controller that includes common operations in GraphJS
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
abstract class AbstractController extends  \Pho\Server\Rest\Controllers\AbstractController
{
    protected $validator;
    const SESSION_FAIL_MESSAGE = "Session required.";
    const INVALID_HASH_MESSAGE = "Invalid hash.";

    public function __construct(Kernel $kernel, bool $jsonp = false)
    {
        $this->validator = new Validator();
        parent::__construct($kernel, $jsonp);
    }

    protected function failSession(ResponseInterface $response)
    {
        return $this->fail($response, static::SESSION_FAIL_MESSAGE);
    }

    protected function failHash(ResponseInterface $response)
    {
        return $this->fail($response, static::INVALID_HASH_MESSAGE);
    }

    protected function isMembershipModerated()
    {
        return 
            isset($this->kernel->graph()->attributes()->MembershipModerated) 
            &&
            (bool) $this->kernel->graph()->getMembershipModerated();
    }

    protected function isReadOnly()
    {
        if(!isset($this->kernel->graph()->attributes()->ReadOnly))
            return false;
        return (bool) $this->kernel->graph()->getReadOnly();
    }

    protected function isVerificationRequired()
    {
        if(!isset($this->kernel->graph()->attributes()->VerificationRequired))
            return false;
        return (bool) $this->kernel->graph()->getVerificationRequired();
    }

    /**
     * Paginate a given array
     *
     * @param array $assets
     * @param array $queryParams
     * @param ?int  $maxCount
     * @return array
     */
    protected function paginate(array $assets, array $queryParams, ?int $maxCount = null): array
    {
        // find out offset
        $offset = 0;
        if(isset($queryParams["offset"])&&is_numeric($queryParams["offset"])) {
            $offset = (int) $queryParams["offset"];
        }

        // find out count
        if(isset($queryParams["count"])&&is_numeric($queryParams["count"])&&$queryParams["count"]!=0) {
            $count = (int) $queryParams["count"];
        }
        else {
            $count = (int) ($maxCount ?? count($blogs));
        }

        return array_slice($assets, $offset, $count, true);
    }

    protected function session(ServerRequestInterface $request): Session
    {
        return $request->getAttribute(SessionMiddleware::ATTRIBUTE_NAME);
    }

    protected function startSession(ServerRequestInterface $request, string $id): Session
    {
        $session = $this->session($request);
        $session->begin();
        $session->setContents([
            "id" => $id
        ]);
        return $session;
    }
    
    /**
     * Makes sure the method is dependent on session availability
     *
     * @param ServerRequestInterface  $request
     * @param ResponseInterface $response
     * 
     * @return int 0 if session does not exists, user ID otherwise.
     */
    protected function dependOnSession(ServerRequestInterface $request, ResponseInterface $response): ?string
    {
        //echo SessionMiddleware::ATTRIBUTE_NAME."\n";

        $session = $this->session($request);
        if(is_null($session))
            return null;
        $contents = $session->getContents();
        if(isset($contents["id"]))
            return $contents["id"];
        //$response = $this->fail($response->withHeader("Access-Control-Allow-Credentials", "true"), "No active session");
        return null;
    }

    protected function checkPasswordFormat(string $password): bool
    {
        return preg_match("/[0-9A-Za-z!@#$%_]{5,15}/", $password);
    }
}
