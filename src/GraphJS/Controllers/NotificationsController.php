<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace GraphJS\Controllers;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Pho\Kernel\Kernel;
use PhoNetworksAutogenerated\User;
use Pho\Lib\Graph\ID;
use GraphJS\Session;


 /**
 * Takes care of Notifications
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
class NotificationsController extends AbstractController
{

    public function getNotificationsCount(ServerRequestInterface $request, ResponseInterface $response)
    {
        if(is_null($id = Session::depend($request))) {
            return $this->failSession($response);
        }
        $i = $this->kernel->gs()->node($id);
        if(!$i instanceof User) {
            return $this->fail($response, "Session Problem");
        }
        $ret = [];
        $c=0;
        $ret["count"] = $i->notifications()->count();
        return $this->succeed($response, $ret);
    }

    public function getNotifications(ServerRequestInterface $request, ResponseInterface $response)
    {
        if(is_null($id = Session::depend($request))) {
            return $this->failSession($response);
        }
        $i = $this->kernel->gs()->node($id);
        if(!$i instanceof User) {
            return $this->fail($response, "Session Problem");
        }
        $ret = [];
        $c=0;
        $ret["count"] = $i->notifications()->count();
        //error_log("Count is: ". $ret["count"]);
        $notifications = $i->notifications()->read(20);
        //error_log(print_r($notifications, true));
        error_log("started");
        $ret["data"] = array();
        foreach($notifications as $notification) {
            error_log(print_r($notification->toArray(), true));
            try {
                error_log("starting");
                $ret["data"][$c]["actor"]["username"] =  $notification->edge()->tail()->node()->getUsername();
                error_log("username ok");
                $ret["data"][$c]["actor"]["avatar"] =  $notification->edge()->tail()->node()->getAvatar();
                error_log("2 ok");
                $ret["data"][$c]["actor"]["id"] =  (string) $notification->edge()->tail()->node()->id();
                error_log("3 ok");
                $ret["data"][$c]["label"] =  $notification->label();
                error_log("4 ok");
                $ret["data"][$c]["target"]["id"] =  (string) $notification->edge()->head()->node()->id();
                error_log("5 ok");
                $c+=1;
            }
            catch(\Exception $e) {
                error_log("There was an exception: ".$e->getMessage());
            }
        }
        return $this->succeed($response, $ret);
    }
}