<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace GraphJS\Controllers;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Pho\Kernel\Kernel;
use PhoNetworksAutogenerated\User;
use PhoNetworksAutogenerated\UserOut\Follow;
use Pho\Lib\Graph\ID;
use Stringy\StaticStringy as S;


/**
 * Takes care of Profile
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
class ProfileController extends AbstractController
{
    /**
     * Get Profile
     * 
     * [id]
     *
     * @param ServerRequestInterface  $request
     * @param ResponseInterface $response
     */
    public function getProfile(ServerRequestInterface $request, ResponseInterface $response)
    {
        $data = $request->getQueryParams();
        $validation = $this->validator->validate($data, [
            'id' => 'required',
        ]);
        if($validation->fails()) {
            return $this->fail($response, "Valid user ID required.");
        }
        if(!preg_match("/^[0-9a-fA-F][0-9a-fA-F]{30}[0-9a-fA-F]$/", $data["id"])) {
            return $this->fail($response, "Invalid user ID");
        }
        try {
            $user = $this->kernel->gs()->node($data["id"]);
        }
        catch(\Exception $e) {
            return $this->fail($response, "Invalid ID");
        }
        if(!$user instanceof User) {
            return $this->fail($response, "Invalid user ID");
        }
        return $this->succeed(
            $response, [
            "profile" => 
                array_merge(
                    array_change_key_case(
                        array_filter(
                            $user->attributes()->toArray(), 
                            function (string $key): bool {
                                return strtolower($key) != "password";
                            },
                            ARRAY_FILTER_USE_KEY
                        ), CASE_LOWER
                    ),
                    [
                        "follower_count" => \count(\iterator_to_array($user->edges()->in(Follow::class))),
                        "following_count" => \count(\iterator_to_array($user->edges()->out(Follow::class))),
                        "membership_count" => isset($user->toArray()["memberships"]) ? \count($user->toArray()["memberships"]) : 0,
                    ] 
                )
            ]
        );
    }

    /**
     * Set Profile
     * 
     * [avatar, birthday, about, username]
     *
     * @param ServerRequestInterface  $request
     * @param ResponseInterface $response
     
     * @param Kernel   $this->kernel
     * @param string   $id
     * 
     * @return void
     */
    public function setProfile(ServerRequestInterface $request, ResponseInterface $response)
    {
        if(is_null($id = $this->dependOnSession(...\func_get_args()))) {
            return $this->failSession($response);
        }
        // Avatar, Birthday, About, Username, Email
        $data = $request->getQueryParams();
        

        $i = $this->kernel->gs()->node($id);
        $sets = [];

        if(isset($data["username"])) {
             if(!preg_match("/^[a-zA-Z0-9_]{1,12}$/", $data["username"])) {
                return $this->fail($response, "Invalid username");
            }
            $sets[] = "username";
            $i->setUsername($data["username"]);
        }

        if(isset($data["password"])) {
            if(!preg_match("/[0-9A-Za-z!@#$%_]{5,15}/", $data["password"])) {
                return $this->fail($response, "Invalid password");
           }
           $sets[] = "password";
           $i->setPassword($data["password"]);
       }

        if(isset($data["birthday"])) {
            /*
            $validation = $this->validator->validate($data, [
                'birthday' => 'date|before:13 years ago',
            ]);
            if($validation->fails()) {
                $this->fail($response, "Birthday invalid.");
                return;
            }
            */
            try {
                $dt = \DateTime::createFromFormat('m/d/Y', $data["birthday"]);
                
            }
            catch(\Exception $e) {
                return $this->fail($response, "Birthday invalid. - 2");
            }
            $i->setBirthday($dt->getTimestamp());
            $sets[] = "birthday";
        }

        if(isset($data["avatar"])) {
            $validation = $this->validator->validate($data, [
                'avatar' => 'url',
            ]);
            if($validation->fails()) {
                return $this->fail($response, "Avatar URL invalid.");
            }
            $sets[] = "avatar";
            $i->setAvatar($data["avatar"]);
        }
     
     if(isset($data["email"])) {
            $validation = $this->validator->validate($data, [
                'email' => 'email',
            ]);
            if($validation->fails()) {
                return $this->fail($response, "Email is invalid.");
            }
            $sets[] = "email";
            $i->setEmail($data["email"]);
        }

        if(isset($data["about"])) {
            $sets[] = "about";
            $i->setAbout($data["about"]);
        }


        //if($this->kernel->graph() instanceof \PhoNetworksAutogenerated\Site) { // Graph.js only
            for($m=1;$m<4;$m++) {
                $custom_field = "custom_field".$m;
                if(isset($data[$custom_field])&&!empty($data[$custom_field])) {
                    $m = S::upperCamelize($custom_field);
                    $sets[] = $this->kernel->graph()->attributes()->$m;
                    $i->attributes()->$m = $data[$custom_field];
                }
            }
        //}

        if(count($sets)==0) {
            return $this->fail($response, "No field to set");
        }
        return $this->succeed(
            $response, [
            "message" => sprintf(
                "Following fields set successfully: %s", 
                implode(", ", $sets)
            )
            ]
        );
    }
}
