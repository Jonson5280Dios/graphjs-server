<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

 /**
  * Pho Networks Tests
  */
class PhoTest extends TestCase
{

    public function test404() {
        $this->expectException(\GuzzleHttp\Exception\ClientException::class);
        $res = $this->get('/');
        //$this->assertEquals(500, $res->getStatusCode());
    }

    public function testHeaders() {
        $res = $this->get('/founder', true);
        $this->assertEquals(200, $res->getStatusCode());
        $this->assertEquals("PhoNetworks", $res->getHeaderLine('server'));
    }

    public function testFounder()
    {
        $body = $this->get('/founder');
        $this->assertEquals("PhoNetworksAutogenerated\\User", $body["class"]);
        $this->assertRegExp('/^[a-f0-9]{32}$/i', $body["id"]);
    }

    public function testGraph()
    {
        $body = $this->get('/graph');
        $this->assertTrue(($body["class"]=="PhoNetworksAutogenerated\\Site"||$body["class"]=="PhoNetworksAutogenerated\\Network"));
        $this->assertRegExp('/^[a-f0-9]{32}$/i', $body["id"]);
    }

    public function testSpace()
    {
        $body = $this->get('/space');
        $this->assertEquals("Pho\\Kernel\\Standards\\Space", $body["class"]);
        $this->assertEquals(str_repeat("0", 32), $body["id"]);
    }

    public function testMatchNodesBySingleAttribute()
    {
        $email = $this->faker->email;
        $this->post('/' . $this->founder_id . '/attribute/email', ['value' => $email]);
        sleep(1);
        $res = $this->get('/nodes?email='.urlencode($email));
        
        $this->assertArrayHasKey("success", $res);$this->assertCount(2, $res);
        $body = $res["results"][0];
        $this->assertEquals($body["n.udid"], $this->founder_id);
    }

    public function testMatchNodesByMultipleAttribute()
    {
        
        $email = $this->faker->email;
        $about_me = $this->faker->text;
        // address
        $this->post('/' . $this->founder_id . '/attribute/email', ['value' => $email]);
        $this->post('/' . $this->founder_id . '/attribute/About', ['value' => $about_me]);
        sleep(1);
        $res = $this->get('/nodes?email='.urlencode($email)."&About=".urlencode($about_me));
        $this->assertArrayHasKey("success", $res);
        $this->assertCount(2, $res);
        $body = $res["results"];
        //eval(\Psy\sh());
        $this->assertCount(1, $body);
        $this->assertEquals($body[0]["n.udid"], $this->founder_id);
    }

    public function testMatchEdgesByAdjacentNodes()
    {
        $tweet = $this->faker->realText(130);
        $post_res = $this->post('/' . $this->founder_id . '/post', ['param1' => $tweet]);
        $res = $this->get('/edges?tail='.urlencode($this->founder_id)."&head=".urlencode($post_res["id"]));
        $this->assertTrue($res["success"]);
        $this->assertCount(1, $res["results"]);
    }

    public function testGetEdges()
    {

        $res = $this->get('/' . $this->founder_id . '/edges/all', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertArrayHasKey("to", $body);
        $this->assertArrayHasKey("from", $body);
        $this->assertArrayHasKey("in", $body);
        $this->assertArrayHasKey("out", $body);
        $this->assertTrue(is_array($body['to']), []);
        $this->assertTrue(is_array($body['from']), []);
        $this->assertTrue(is_array($body['in']), []);
        $this->assertTrue(is_array($body['out']), []);
    }

    public function testGetAllEdges()
    {

        $res = $this->get('/' . $this->founder_id . '/edges/all', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertArrayHasKey("to", $body);
        $this->assertArrayHasKey("from", $body);
        $this->assertArrayHasKey("in", $body);
        $this->assertArrayHasKey("out", $body);
        $this->assertTrue(is_array($body['to']), []);
        $this->assertTrue(is_array($body['from']), []);
        $this->assertTrue(is_array($body['in']), []);
        $this->assertTrue(is_array($body['out']), []);
    }

    public function testGetInEdge()
    {
        $res = $this->get('/' . $this->founder_id . '/edges/in', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertTrue(is_array($body));
    }

    public function testGetOutEdge()
    {
        $res = $this->get('/' . $this->founder_id . '/edges/out', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertTrue(is_array($body));
    }

    public function testGetNonExistingEdge()
    {
        $this->expectException('\GuzzleHttp\Exception\ServerException');
        $res = $this->get('/' . $this->founder_id . '/edges/nonExist', true);
    }

    public function testCreateEdge()
    {
        $post_res = $this->post('/' . $this->founder_id . '/post', ['param1' => 'This is new tweet']);
        //eval(\Psy\sh());
        $this->assertTrue($post_res["success"]);
        $this->assertTrue((bool)preg_match('/^[0-9a-fA-F]{32}$/', $post_res["id"]));
        //$this->assertSame($post_res['success'], true);
    }

    public function testCreatedEdgeInOut()
    {
        $res = $this->get('/' . $this->founder_id . '/edges/all', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertSame(false, empty($body));

        $keys = array_keys($body['to']);
        $tweet_id = array_pop($keys);
        $this->assertNotNull($tweet_id);
        $edge_id = array_column($body['to'][$tweet_id], "id")[0];
        $this->assertNotNull($edge_id);
        $return = [$tweet_id, $edge_id];

        return $return;
    }

    /**
     * @depends testCreatedEdgeInOut
     */
    public function testPostExits(array $ids)
    {
        list($tweet_id, $edge_id) = $ids;

        $res = $this->get('/' . $tweet_id, true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertSame(false, empty($body));
    }

    /**
     * @depends testCreatedEdgeInOut
     */
    public function testPostFrom(array $ids)
    {
        list($tweet_id, $edge_id) = $ids;

        $res = $this->get('/' . $tweet_id . '/edges/all', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertSame(false, empty($body));
        $keys       = array_keys($body['from']);
        $founder_id = array_pop($keys);
        $this->assertSame($founder_id, $this->founder_id);
        $this->edge_id = array_column($body['from'][$founder_id], "id")[0];
        $this->assertSame($this->edge_id, $edge_id);
    }

    /**
     * @depends testCreatedEdgeInOut
     */
    public function testPostEdge(array $ids)
    {
        list($tweet_id, $edge_id) = $ids;

        $res = $this->get('/edge/' . $edge_id, true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertSame(false, empty($body));
        $this->assertArrayHasKey("tail", $body);
        $this->assertArrayHasKey("head", $body);
        $this->assertSame($body['tail'], $this->founder_id);
        $this->assertSame($body['head'], $tweet_id);

    }

    public function testEntityGetAttributes()
    {
        $res = $this->get('/' . $this->founder_id . '/attributes', true);
        $this->assertEquals(200, $res->getStatusCode());

        $body = json_decode($res->getBody(), true);
        $this->assertContains("Password", $body);
        $this->assertContains("JoinTime", $body);
        $this->assertContains("Birthday", $body);
        $this->assertContains("About", $body);
    }

    public function testEntityType()
    {
        $res = $this->get('/' . $this->founder_id . '/type');
        $this->assertArrayHasKey("success", $res);
        $this->assertArraySubset(["type"=>"Actor Node"], $res);
    }

    public function testGetUnexistingAttribute()
    {
        $res = $this->get('/' . $this->founder_id . '/attribute/NewAttribute');
        $this->assertEquals(null, $res['NewAttribute']);
    }

    /**
     * @depends testEntityGetAttributes
     */
    public function testEntitySetAttribute()
    {
        $text = 'Some new text';
        $this->post('/' . $this->founder_id . '/attribute/NewAttribute', ['value' => $text]);

        $body = $this->get('/' . $this->founder_id . '/attributes');
        $this->assertContains("NewAttribute", $body);
        $body = $this->get('/' . $this->founder_id . '/attribute/NewAttribute');
        $this->assertSame(["success"=>true, "NewAttribute"=>$text], $body);
    }

    /**
     * @depends testEntityGetAttributes
     */
    public function testEntitySetEmptyAttribute()
    {
        $this->expectException('\GuzzleHttp\Exception\ServerException');
        $this->post('/' . $this->founder_id . '/attribute/NewAttribute2', ['value' => '']);
    }

    /**
     * @depends testEntityGetAttributes
     */
    public function testEntityChangeAttribute()
    {
        $text = 'Changed text in the attribute';
        $this->post('/' . $this->founder_id . '/attribute/NewAttribute', ['value' => $text]);

        $body = $this->get('/' . $this->founder_id . '/attributes');
        $this->assertContains("NewAttribute", $body);
        $body = $this->get('/' . $this->founder_id . '/attribute/NewAttribute');
        $this->assertSame(["success"=>true, "NewAttribute"=>$text], $body);
    }

    /**
     * @depends testEntityGetAttributes
     */
    public function testDeleteAttribute()
    {
        $this->delete('/' . $this->founder_id . '/attribute/NewAttribute');

        $body = $this->get('/' . $this->founder_id . '/attributes');
        $this->assertFalse(array_key_exists('NewAttribute', $body));
    }

}
